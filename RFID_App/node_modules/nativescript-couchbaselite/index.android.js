"use strict";
var utils = require("utils/utils");
var def = require("./index");
var class_transformer_1 = require("class-transformer");
var commons_1 = require("./commons");
var commons_2 = require("./commons");
exports.AttachmentImage = commons_2.AttachmentImage;
exports.IndexUpdateMode = commons_2.IndexUpdateMode;
exports.Log = commons_2.Log;
exports.ReplicationError = commons_2.ReplicationError;
exports.ReplicationStatus = commons_2.ReplicationStatus;
exports.Storage = commons_2.Storage;
var DatabaseManager = (function () {
    function DatabaseManager() {
        this.manager = null;
    }
    DatabaseManager.get = function () {
        if (DatabaseManager.instance == null) {
            DatabaseManager.instance = new DatabaseManager();
            var androidContext = new com.couchbase.lite.android.AndroidContext(utils.ad.getApplicationContext());
            DatabaseManager.instance.manager = new com.couchbase.lite.Manager(androidContext, com.couchbase.lite.Manager.DEFAULT_OPTIONS);
        }
        return DatabaseManager.instance;
    };
    DatabaseManager.getOrCreate = function (opts) {
        try {
            var instance = DatabaseManager.get();
            var db = void 0;
            if (opts.encryptionKey) {
                var dbOpt = new com.couchbase.lite.DatabaseOptions();
                dbOpt.setEncryptionKey(opts.encryptionKey);
                dbOpt.setCreate(opts.create);
                db = instance.manager.openDatabase(opts.name, dbOpt);
            }
            else {
                db = instance.manager.getDatabase(opts.name);
            }
            return new Database(db);
        }
        catch (exception) {
            throw "Failed to create db with name:" + opts.name + "." + exception;
        }
    };
    DatabaseManager.getExisting = function (opts) {
        try {
            var instance = DatabaseManager.get();
            var db = void 0;
            if (opts.encryptionKey) {
                var dbOpt = new com.couchbase.lite.DatabaseOptions();
                dbOpt.setEncryptionKey(opts.encryptionKey);
                dbOpt.setCreate(false);
                db = instance.manager.openDatabase(opts.name, dbOpt);
            }
            else {
                db = instance.manager.getExistingDatabase(opts.name);
            }
            if (db == null) {
                throw "Failed to open db with name:" + opts.name;
            }
            else {
                return new Database(db);
            }
        }
        catch (exception) {
            throw "Failed to open db with name:" + opts.name + ".\n" + exception;
        }
    };
    return DatabaseManager;
}());
exports.DatabaseManager = DatabaseManager;
var Mapper = (function () {
    function Mapper() {
        this.gson = null;
        this.mapping = new Map();
        this.typeMap = null;
        this.gson = new com.google.gson.GsonBuilder().create();
        var clazz = new java.util.HashMap().getClass();
        this.typeMap = com.google.gson.reflect.TypeToken.get(clazz).getType();
    }
    Mapper.prototype.copy = function () {
        var m = new Mapper;
        m.mapping = this.mapping;
        return m;
    };
    Mapper.prototype.setMapping = function (m) {
        this.mapping = m;
    };
    Mapper.prototype.toJavaDate = function (d) {
        return new java.util.Date(d.getTime());
    };
    Mapper.prototype.toJSSAfe = function (javaO) {
        var isInstance = function (a) {
            var clazz = a["class"];
            return clazz.isInstance(javaO);
        };
        if (javaO == null) {
            return null;
        }
        else if (isInstance(java.util.Collection)) {
            var coll = javaO;
            var array = [];
            var it = coll.iterator();
            while (it.hasNext()) {
                var next = it.next();
                array.push(this.toJSSAfe(next));
            }
            return array;
        }
        else if (isInstance(java.util.Map)) {
            var coll = javaO;
            return this.mapToJson(coll);
        }
        else if (isInstance(java.lang.String)) {
            return "" + javaO;
        }
        else if (isInstance(java.lang.Boolean)) {
            return true && javaO.booleanValue();
        }
        else if (isInstance(java.lang.Number)) {
            return 0 + javaO.doubleValue();
        }
        else if (isInstance(java.util.Date)) {
            return new Date(javaO.getTime());
        }
        else {
            return JSON.parse(this.gson.toJson(javaO));
        }
    };
    Mapper.prototype.toJavaSafe = function (jsO) {
        var _this = this;
        if (commons_1.JSTypeChecker.isUndefined(jsO)) {
            return null;
        }
        else if (commons_1.JSTypeChecker.isArray(jsO)) {
            var array_1 = new java.util.ArrayList();
            jsO.forEach(function (a) { return array_1.add(_this.toJavaSafe(a)); });
            return array_1;
        }
        else if (commons_1.JSTypeChecker.isMap(jsO)) {
            var array_2 = new java.util.HashMap();
            jsO.forEach(function (value, key) { return array_2.put(_this.toJavaSafe(key), _this.toJavaSafe(value)); });
            return array_2;
        }
        else if (commons_1.JSTypeChecker.isString(jsO)) {
            return new java.lang.String(jsO);
        }
        else if (commons_1.JSTypeChecker.isBoolean(jsO)) {
            return new java.lang.Boolean(jsO);
        }
        else if (commons_1.JSTypeChecker.isInt(jsO)) {
            return new java.lang.Long(jsO);
        }
        else if (commons_1.JSTypeChecker.isFloat(jsO)) {
            return new java.lang.Double(jsO);
        }
        else if (commons_1.JSTypeChecker.isDate(jsO)) {
            return new java.util.Date(jsO.getTime());
        }
        else {
            return this.jsonToMap(jsO);
        }
    };
    //http://stackoverflow.com/questions/22011200/creating-hashmap-from-a-json-string
    Mapper.prototype.jsonToMap = function (json) {
        if (typeof json !== "string") {
            json = JSON.stringify(json);
        }
        return this.gson.fromJson(json, this.typeMap);
    };
    Mapper.prototype.mapToJson = function (map) {
        if (typeof map === "undefined" || map == null) {
            return null;
        }
        var type = map.get("docType");
        var jsonString = this.gson.toJson(map, this.typeMap);
        if (this.mapping.has(type)) {
            return class_transformer_1.deserialize(this.mapping.get(type), jsonString);
        }
        else {
            return JSON.parse(jsonString);
        }
    };
    return Mapper;
}());
var Database = (function () {
    function Database(db) {
        this.db = db;
        this.mapper = new Mapper();
    }
    Database.prototype.setMapping = function (m) {
        this.mapper.setMapping(m);
    };
    Database.prototype.purge = function (id) {
        var document = this.db.getExistingDocument(id);
        if (document != null) {
            document.purge();
        }
    };
    Database.prototype.createDocument = function (data, id, opts) {
        try {
            var document = null;
            if (id) {
                document = this.db.getDocument(id);
            }
            else {
                document = this.db.createDocument();
            }
            if (opts) {
                opts.ttl && document.setExpirationDate(this.mapper.toJavaDate(opts.ttl));
            }
            //
            data.docId = document.getId();
            var rev = document.putProperties(this.mapper.jsonToMap(data));
            data.docRev = rev.getId();
        }
        catch (exception) {
            throw "Failed to createDocument:" + exception;
        }
    };
    Database.prototype.getDocument = function (id) {
        var document = this.db.getExistingDocument(id);
        if (document != null && document.getProperties() != null) {
            var value = this.mapper.mapToJson(document.getProperties());
            value.docId = document.getId();
            value.docRev = document.getCurrentRevisionId();
            return value;
        }
        else {
            return null;
        }
    };
    Database.prototype.updateDocument = function (id, data, opts) {
        try {
            var document = this.db.getDocument(id);
            data.docId = document.getId();
            data.docRev = document.getCurrentRevisionId();
            if (opts) {
                opts.ttl && document.setExpirationDate(this.mapper.toJavaDate(opts.ttl));
            }
            document.putProperties(this.mapper.jsonToMap(data));
        }
        catch (exception) {
            throw "Failed to updateDocument:" + exception;
        }
    };
    Database.prototype.deleteDocument = function (id) {
        try {
            var document = this.db.getDocument(id);
            document.delete();
            return document.isDeleted();
        }
        catch (exception) {
            throw "Failed to deleteDocument:" + exception;
        }
    };
    Database.prototype.getConflicts = function (id) {
        var document = this.db.getDocument(id);
        var revs = document.getConflictingRevisions();
        var all = [];
        for (var i = 0; i < revs.size(); i++) {
            var temp = revs.get(i);
            all.push({
                id: temp.document.getId(),
                object: this.mapper.mapToJson(temp.document.getProperties()),
                revid: temp.getId()
            });
        }
        return all;
    };
    Database.prototype.resolveConflict = function (id, merged) {
        var self = this;
        this.db.runInTransaction(new com.couchbase.lite.TransactionalTask({
            run: function () {
                try {
                    var document = self.db.getDocument(id);
                    var current = document.getCurrentRevision();
                    var revs = document.getConflictingRevisions();
                    for (var i = 0; i < revs.size(); i++) {
                        var rev = revs.get(i);
                        var newRev = rev.createRevision();
                        if (rev.getId() == (current.getId())) {
                            newRev.setProperties(self.mapper.jsonToMap(merged));
                        }
                        else {
                            newRev.setIsDeletion(true);
                        }
                        newRev.save(true);
                    }
                    return true;
                }
                catch (exception) {
                    return false;
                }
            }
        }));
    };
    Database.prototype.getAttachment = function (id, name) {
        var doc = this.db.getDocument(id);
        var rev = doc.getCurrentRevision();
        var att = rev.getAttachment(name);
        if (att != null) {
            return new AttachmentDefault(att);
        }
        else {
            return null;
        }
    };
    Database.prototype.getAttachmentNames = function (id) {
        var doc = this.db.getDocument(id);
        var rev = doc.getCurrentRevision();
        var names = rev.getAttachmentNames();
        var array = [];
        for (var i = 0; i < names.size(); i++) {
            var temp = names.get(i);
            array.push(temp);
        }
        return array;
    };
    Database.prototype.getAttachments = function (id) {
        var doc = this.db.getDocument(id);
        var rev = doc.getCurrentRevision();
        var names = rev.getAttachments();
        var array = [];
        for (var i = 0; i < names.size(); i++) {
            var temp = names.get(i);
            array.push(new AttachmentDefault(temp));
        }
        return array;
    };
    Database.prototype.setAttachment = function (id, file) {
        var doc = this.db.getDocument(id);
        var newRev = doc.getCurrentRevision().createRevision();
        newRev.setAttachment(file.getName(), file.getType(), file.getStream());
        newRev.save();
    };
    Database.prototype.removeAttachment = function (id, name) {
        var doc = this.db.getDocument(id);
        var newRev = doc.getCurrentRevision().createRevision();
        newRev.removeAttachment(name);
        newRev.save();
    };
    Database.prototype.createView = function (opts) {
        var self = this;
        var view = this.db.getView(opts.name);
        //let newLoader = java.lang.Thread.currentThread().getContextClassLoader();
        var mapper = new com.couchbase.lite.Mapper({
            map: function (document, emitter) {
                //let oldLoader = java.lang.Thread.currentThread().getContextClassLoader();
                try {
                    //java.lang.Thread.currentThread().setContextClassLoader(newLoader);
                    var value = self.mapper.mapToJson(document);
                    opts.map(value, new Emitter(emitter, self.mapper.copy()));
                }
                finally {
                }
            }
        });
        if (opts.reduce) {
            view.setMapReduce(mapper, new com.couchbase.lite.Reducer({
                reduce: function (keys, values, rereduce) {
                    var keysJson = self.mapper.toJSSAfe(keys);
                    var valuesJson = self.mapper.toJSSAfe(values);
                    var result = opts.reduce(keysJson, valuesJson, rereduce);
                    return self.mapper.toJavaSafe(result);
                }
            }), opts.revision);
        }
        else {
            view.setMap(mapper, opts.revision);
        }
    };
    Database.prototype.convertIndexMode = function (indexMode) {
        switch (indexMode) {
            case def.IndexUpdateMode.BEFORE:
                return com.couchbase.lite.Query.IndexUpdateMode.BEFORE;
            case def.IndexUpdateMode.AFTER:
                return com.couchbase.lite.Query.IndexUpdateMode.AFTER;
            case def.IndexUpdateMode.NEVER:
                return com.couchbase.lite.Query.IndexUpdateMode.NEVER;
        }
        return null;
    };
    Database.prototype.prepareQuery = function (query, queryM) {
        this.isDefined(query.onlyConflict) && queryM.setAllDocsMode(com.couchbase.lite.Query.AllDocsMode.ONLY_CONFLICTS);
        this.isDefined(query.inclusiveStart) && queryM.setInclusiveStart(query.inclusiveStart);
        this.isDefined(query.inclusiveEnd) && queryM.setInclusiveEnd(query.inclusiveEnd);
        this.isDefined(query.descending) && queryM.setDescending(query.descending);
        this.isDefined(query.endKey) && queryM.setEndKey(this.mapper.toJavaSafe(query.endKey));
        this.isDefined(query.endKeyDocID) && queryM.setEndKeyDocId(query.endKeyDocID);
        this.isDefined(query.groupLevel) && queryM.setGroupLevel(query.groupLevel);
        this.isDefined(query.indexUpdateMode) && queryM.setIndexUpdateMode(this.convertIndexMode(query.indexUpdateMode));
        this.isDefined(query.keys) && queryM.setKeys(this.mapper.toJavaSafe(query.keys));
        this.isDefined(query.limit) && queryM.setLimit(query.limit);
        this.isDefined(query.mapOnly) && queryM.setMapOnly(query.mapOnly);
        this.isDefined(query.prefixMatchLevel) && queryM.setPrefixMatchLevel(query.prefixMatchLevel);
        this.isDefined(query.skip) && queryM.setSkip(query.skip);
        this.isDefined(query.startKey) && queryM.setStartKey(this.mapper.toJavaSafe(query.startKey));
        this.isDefined(query.startKeyDocID) && queryM.setStartKeyDocId(query.startKeyDocID);
    };
    Database.prototype.queryView = function (name, query) {
        var queryM = this.db.getView(name).createQuery();
        this.prepareQuery(query, queryM);
        var resEnum = queryM.run();
        return new QueryResult(queryM, resEnum, this.mapper.copy());
    };
    Database.prototype.queryAllDocuments = function (query) {
        var queryM = this.db.createAllDocumentsQuery();
        this.prepareQuery(query, queryM);
        var resEnum = queryM.run();
        return new QueryResult(queryM, resEnum, this.mapper.copy());
    };
    Database.prototype.liveQuery = function (name, query, listener) {
        var _this = this;
        var view = this.db.getView(name);
        var queryM = view.createQuery();
        this.prepareQuery(query, queryM);
        var live = queryM.toLiveQuery();
        var self = this;
        live.addChangeListener(new com.couchbase.lite.LiveQuery.ChangeListener({
            changed: function (event) {
                var obj = event.getSource();
                if (obj.equals(live)) {
                    var res = new QueryResult(live, live.getRows(), self.mapper.copy());
                    listener.onRows(res);
                }
            }
        }));
        return {
            waitForRows: function () {
                live.waitForRows();
            },
            updateIndex: function () {
                view.updateIndex();
            },
            start: function () {
                live.start();
            },
            stop: function () {
                live.stop();
            },
            run: function () {
                var resEnum = live.run();
                return new QueryResult(live, resEnum, _this.mapper.copy());
            }
        };
    };
    Database.prototype.addChangeListener = function (listener) {
        try {
            this.db.addChangeListener(new com.couchbase.lite.Database.ChangeListener({
                changed: function (event) {
                    var changes = event.getChanges();
                    var all = [];
                    for (var i = 0; i < changes.size(); i++) {
                        var change = changes.get(i);
                        all.push({
                            documentId: change.getDocumentId(),
                            revisionId: change.getRevisionId(),
                            isConflict: change.isConflict(),
                            isCurrentRevision: change.isCurrentRevision(),
                            isDeletion: change.isDeletion(),
                            source: (change.getSource() != null) ? change.getSource().toString() : null
                        });
                    }
                    listener.onChange(all);
                }
            }));
        }
        catch (exception) {
            throw "Failed to listen changes..." + exception;
        }
    };
    Database.prototype.createPullReplication = function (url) {
        try {
            var pull = this.db.createPullReplication(new java.net.URL(url));
            return new ReplicationPull(pull, this.mapper.copy());
        }
        catch (exception) {
            throw "Failed to create pull replication..." + exception;
        }
    };
    Database.prototype.createPushReplication = function (url) {
        try {
            var pull = this.db.createPushReplication(new java.net.URL(url));
            return new ReplicationPush(pull, this.mapper.copy());
        }
        catch (exception) {
            throw "Failed to create push replication..." + exception;
        }
    };
    Database.prototype.createFilter = function (opts) {
        var _this = this;
        this.db.setFilter(opts.name, new com.couchbase.lite.ReplicationFilter({
            filter: function (revision, params) {
                var pa = _this.mapper.toJSSAfe(params);
                return opts.filter({
                    id: revision.getDocument().getId(),
                    revid: revision.getId(),
                    object: _this.mapper.mapToJson(revision.getDocument().getProperties())
                }, pa);
            }
        }));
    };
    Database.prototype.destroy = function () {
        try {
            this.db.delete();
        }
        catch (exception) {
            throw "Failed to destroy db..." + exception;
        }
    };
    Database.prototype.close = function () {
        try {
            this.db.close();
        }
        catch (exception) {
            throw "Failed to close db..." + exception;
        }
    };
    Database.prototype.isDefined = function (variable) {
        return (typeof variable !== 'undefined' && variable != null);
    };
    return Database;
}());
exports.Database = Database;
var QueryResult = (function () {
    function QueryResult(query, resEnum, mapper) {
        this.query = query;
        this.resEnum = resEnum;
        this.mapper = mapper;
        this.ids = null;
        this.documents = null;
        this.values = null;
    }
    QueryResult.prototype.getDocuments = function () {
        this.resEnum.reset();
        if (this.documents == null) {
            this.documents = [];
            while (this.resEnum.hasNext()) {
                var row = this.resEnum.next();
                if (row.getDocument() != null) {
                    var prop = row.getDocument().getProperties();
                    var doc = this.mapper.mapToJson(prop);
                    doc.docId = row.getDocument().getId();
                    this.documents.push(doc);
                }
            }
        }
        return this.documents;
    };
    QueryResult.prototype.getValues = function () {
        this.resEnum.reset();
        if (this.values == null) {
            this.values = [];
            while (this.resEnum.hasNext()) {
                var row = this.resEnum.next();
                if (row.getValue() != null) {
                    var doc = this.mapper.toJSSAfe(row.getValue());
                    this.values.push(doc);
                }
            }
        }
        return this.values;
    };
    QueryResult.prototype.getDocumentsId = function () {
        if (this.ids == null) {
            this.ids = [];
            while (this.resEnum.hasNext()) {
                var row = this.resEnum.next();
                if (row.getDocumentId() != null) {
                    this.ids.push(row.getDocumentId());
                }
            }
        }
        return this.ids;
    };
    QueryResult.prototype.firstDocument = function () {
        var docs = this.getDocuments();
        return docs.length > 0 ? docs[0] : null;
    };
    QueryResult.prototype.firstValue = function () {
        var docs = this.getValues();
        return docs.length > 0 ? docs[0] : null;
    };
    QueryResult.prototype.firstId = function () {
        var docs = this.getDocumentsId();
        return docs.length > 0 ? docs[0] : null;
    };
    QueryResult.prototype.hasDocuments = function () {
        var docs = this.getDocuments();
        return docs.length > 0;
    };
    QueryResult.prototype.hasValues = function () {
        var docs = this.getValues();
        return docs.length > 0;
    };
    QueryResult.prototype.hasIds = function () {
        var docs = this.getDocumentsId();
        return docs.length > 0;
    };
    QueryResult.prototype.rerun = function () {
        this.documents = null;
        this.ids = null;
        this.values = null;
        this.resEnum = this.query.run();
    };
    return QueryResult;
}());
exports.QueryResult = QueryResult;
var Replication = (function () {
    function Replication() {
    }
    Replication.prototype.addChangeListener = function (listener) {
        this.observer().addChangeListener(new com.couchbase.lite.replicator.Replication.ChangeListener({
            changed: function (ev) {
                listener.onChange({
                    changesCount: ev.getChangeCount(),
                    completedChangesCount: ev.getCompletedChangeCount(),
                    lastError: (ev.getError() == null) ? null : ev.getError().getMessage(),
                    lastErrorCode: (ev.getError() == null) ? null : ev.getError().code,
                    status: ev.getStatus()
                });
            }
        }));
    };
    return Replication;
}());
var ReplicationPull = (function (_super) {
    __extends(ReplicationPull, _super);
    function ReplicationPull(innerPull, mapper) {
        _super.call(this);
        this.innerPull = innerPull;
        this.mapper = mapper;
    }
    ReplicationPull.prototype.observer = function () {
        return this.innerPull;
    };
    ReplicationPull.prototype.setContinuous = function (cont) {
        this.innerPull.setContinuous(true);
    };
    ReplicationPull.prototype.setBasicAuthenticator = function (user, password) {
        var auth = new com.couchbase.lite.auth.BasicAuthenticator(user, password);
        this.innerPull.setAuthenticator(auth);
    };
    ReplicationPull.prototype.restart = function () {
        this.innerPull.restart();
    };
    ReplicationPull.prototype.start = function () {
        this.innerPull.start();
    };
    ReplicationPull.prototype.stop = function () {
        this.innerPull.stop();
    };
    ReplicationPull.prototype.channels = function (channels) {
        this.innerPull.setChannels(this.mapper.toJavaSafe(channels));
    };
    ReplicationPull.prototype.setDocIds = function (docs) {
        this.innerPull.setDocIds(this.mapper.toJavaSafe(docs));
    };
    return ReplicationPull;
}(Replication));
exports.ReplicationPull = ReplicationPull;
var ReplicationPush = (function (_super) {
    __extends(ReplicationPush, _super);
    function ReplicationPush(innerPush, mapper) {
        _super.call(this);
        this.innerPush = innerPush;
        this.mapper = mapper;
    }
    ReplicationPush.prototype.setContinuous = function (cont) {
        this.innerPush.setContinuous(true);
    };
    ReplicationPush.prototype.setBasicAuthenticator = function (user, password) {
        var auth = new com.couchbase.lite.auth.BasicAuthenticator(user, password);
        this.innerPush.setAuthenticator(auth);
    };
    ReplicationPush.prototype.restart = function () {
        this.innerPush.restart();
    };
    ReplicationPush.prototype.start = function () {
        this.innerPush.start();
    };
    ReplicationPush.prototype.stop = function () {
        this.innerPush.stop();
    };
    ReplicationPush.prototype.observer = function () {
        return this.innerPush;
    };
    ReplicationPush.prototype.setFilter = function (filter) {
        this.innerPush.setFilter(filter);
    };
    ReplicationPush.prototype.setFilterParams = function (params) {
        this.innerPush.setFilterParams(this.mapper.toJavaSafe(params));
    };
    return ReplicationPush;
}(Replication));
exports.ReplicationPush = ReplicationPush;
var Emitter = (function () {
    function Emitter(innerEmitter, mapper) {
        this.innerEmitter = innerEmitter;
        this.mapper = mapper;
    }
    Emitter.prototype.emit = function (key, value) {
        this.innerEmitter.emit(this.mapper.toJavaSafe(key), this.mapper.toJavaSafe(value));
    };
    return Emitter;
}());
exports.Emitter = Emitter;
var AttachmentDefault = (function () {
    function AttachmentDefault(atachment) {
        this.atachment = atachment;
    }
    AttachmentDefault.prototype.getName = function () {
        return this.atachment.getName();
    };
    AttachmentDefault.prototype.getType = function () {
        return this.atachment.getContentType();
    };
    AttachmentDefault.prototype.getStream = function () {
        return this.atachment.getContent();
    };
    return AttachmentDefault;
}());
exports.AttachmentDefault = AttachmentDefault;
var AttachmentFactory = (function () {
    function AttachmentFactory() {
    }
    AttachmentFactory.fromSource = function (source, name, type) {
        var ad = source.android;
        var bos = new java.io.ByteArrayOutputStream();
        var bMapType = def.AttachmentImage.PNG ? android.graphics.Bitmap.CompressFormat.PNG : android.graphics.Bitmap.CompressFormat.JPEG;
        var bMapQuality = def.AttachmentImage.PNG ? 0 : 100;
        ad.compress(bMapType, bMapQuality /*ignored for PNG*/, bos);
        var bitmapdata = bos.toByteArray();
        var bs = new java.io.ByteArrayInputStream(bitmapdata);
        return {
            getName: function () {
                return name;
            },
            getStream: function () {
                return bs;
            },
            getType: function () {
                return type == def.AttachmentImage.PNG ? "image/png" : "image/jpeg";
            }
        };
    };
    return AttachmentFactory;
}());
exports.AttachmentFactory = AttachmentFactory;
