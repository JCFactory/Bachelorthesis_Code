{
  "_args": [
    [
      {
        "raw": "nativescript-doctor@https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
        "scope": null,
        "escapedName": "nativescript-doctor",
        "name": "nativescript-doctor",
        "rawSpec": "https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
        "spec": "https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
        "type": "remote"
      },
      "/Users/jacquelinefranssen/Desktop/Bachelorthesis_Code/RFID_App/node_modules/nativescript"
    ]
  ],
  "_from": "nativescript-doctor@https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
  "_id": "nativescript-doctor@0.12.0",
  "_inCache": true,
  "_location": "/nativescript/nativescript-doctor",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nativescript-doctor@https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
    "scope": null,
    "escapedName": "nativescript-doctor",
    "name": "nativescript-doctor",
    "rawSpec": "https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
    "spec": "https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/nativescript"
  ],
  "_resolved": "https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
  "_shasum": "6c2e62e4e50e957e2364a70845368aae68b2c226",
  "_shrinkwrap": null,
  "_spec": "nativescript-doctor@https://registry.npmjs.org/nativescript-doctor/-/nativescript-doctor-0.12.0.tgz",
  "_where": "/Users/jacquelinefranssen/Desktop/Bachelorthesis_Code/RFID_App/node_modules/nativescript",
  "author": {
    "name": "Telerik",
    "email": "support@telerik.com"
  },
  "bugs": {
    "url": "https://github.com/NativeScript/nativescript-doctor/issues"
  },
  "dependencies": {
    "osenv": "0.1.3",
    "semver": "5.3.0",
    "temp": "0.8.3",
    "unzip": "0.1.11",
    "winreg": "1.2.2"
  },
  "description": "Library that helps identifying if the environment can be used for development of {N} apps.",
  "devDependencies": {
    "@types/chai": "4.1.0",
    "@types/mocha": "2.2.32",
    "@types/semver": "5.3.30",
    "@types/temp": "0.8.29",
    "@types/winreg": "1.2.30",
    "chai": "4.1.2",
    "grunt": "1.0.1",
    "grunt-contrib-clean": "1.0.0",
    "grunt-contrib-watch": "1.0.0",
    "grunt-shell": "2.0.0",
    "grunt-ts": "6.0.0-beta.3",
    "grunt-tslint": "3.3.0",
    "istanbul": "0.4.5",
    "mocha": "3.1.2",
    "rimraf": "2.5.4",
    "tslint": "3.15.1",
    "typescript": "2.0.3"
  },
  "homepage": "https://github.com/NativeScript/nativescript-doctor#readme",
  "keywords": [
    "NativeScript",
    "doctor",
    "tns"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "name": "nativescript-doctor",
  "optionalDependencies": {},
  "readme": "# nativescript-doctor\nLibrary that helps identifying if the environment can be used for development of {N} apps.\n\n# Installation\n1. Using npm\n\t```bash\n\t$ npm install nativescript-doctor --save\n\t```\n\n# Requirements\n1. Node.js 4.3.0 or later\n\n# Usage\n* Module `doctor`:\n\t- Usage:\n\t```TypeScript\n\timport { doctor } from \"nativescript-doctor\"\n\n\tasync function main() {\n\t\tconst canExecuteLocalBuildForAndroid = await doctor.canExecuteLocalBuild(\"Android\");\n\t\tconst canExecuteLocalBuildForIos = await doctor.canExecuteLocalBuild(\"iOS\");\n\t\tconsole.log(\"Can execute local build for Android: \", canExecuteLocalBuildForAndroid);\n\t\tconsole.log(\"Can execute local build for iOS: \", canExecuteLocalBuildForIos);\n\t}\n\n\tmain();\n\t```\n\n\t- Interfaces:\n\t```TypeScript\n\t/**\n\t * Describes methods which help identifying if the environment can be used for development of {N} apps.\n\t */\n\tinterface IDoctor {\n\t\t/**\n\t\t * Checks if a local build can be executed on the current machine.\n\t\t * @param {string} platform The platform for which to check if local build is possible.\n\t\t * @return {Promise<boolean>} true if local build can be executed for the provided platform.\n\t\t */\n\t\tcanExecuteLocalBuild(platform: string): Promise<boolean>;\n\n\t\t/**\n\t\t * Executes all checks for the current environment and returns the warnings from each check.\n\t\t * @return {Promise<IWarning[]>} Array of all the warnings from all checks. If there are no warnings will return empty array.\n\t\t */\n\t\tgetWarnings(): Promise<IWarning[]>;\n\t}\n\n\t/**\n\t * Describes warning returned from nativescript-doctor check.\n\t */\n\tinterface IWarning {\n\t\t/**\n\t\t * The warning.\n\t\t * @type {string}\n\t\t */\n\t\twarning: string;\n\n\t\t/**\n\t\t * Additional information for the warning.\n\t\t * @type {string}\n\t\t */\n\t\tadditionalInformation: string;\n\n\t\t/**\n\t\t * The platforms which are affected by this warning.\n\t\t * @type {string[]}\n\t\t */\n\t\tplatforms: string[];\n\t}\n\t```\n\n* Module `sysInfo`:\n\t- Usage:\n\t```TypeScript\n\timport { sysInfo, setShouldCacheSysInfo } from \"nativescript-doctor\";\n\n\tasync function main() {\n\t\t// The default value is true. If set to false the result of each check for each element\n\t\t// of the sys info will not be cached.\n\t\tsetShouldCacheSysInfo(false);\n\n\t\tconst javacVersion = await sysInfo.getJavaCompilerVersion();\n\t\tconsole.log(\"javac: \", javacVersion);\n\n\t\tconst adbVersion = await sysInfo.getAdbVersion();\n\t\tconsole.log(\"adb: \", adbVersion);\n\n\t\tconst cocoaPodsVersion = await sysInfo.getCocoaPodsVersion();\n\t\tconsole.log(\"cocoapods: \", cocoaPodsVersion);\n\n\t\tconst gitVersion = await sysInfo.getGitVersion();\n\t\tconsole.log(\"git: \", gitVersion);\n\n\t\tconst gradleVersion = await sysInfo.getGradleVersion();\n\t\tconsole.log(\"gradle: \", gradleVersion);\n\n\t\tconst monoVersion = await sysInfo.getMonoVersion();\n\t\tconsole.log(\"mono: \", monoVersion);\n\n\t\tconst nodeVersion = await sysInfo.getNodeVersion();\n\t\tconsole.log(\"node: \", nodeVersion);\n\n\t\tconst npmVersion = await sysInfo.getNpmVersion();\n\t\tconsole.log(\"npm: \", npmVersion);\n\n\t\tconst nodeGypVersion = await sysInfo.getNodeGypVersion();\n\t\tconsole.log(\"node-gyp: \", nodeGypVersion);\n\n\t\tconst osName = await sysInfo.getOs();\n\t\tconsole.log(\"os: \", osName);\n\n\t\tconst xcodeprojLocation = await sysInfo.getXCodeProjLocation();\n\t\tconsole.log(\"xcodeproj location: \", xcodeprojLocation);\n\n\t\tconst xcodeVersion = await sysInfo.getXCodeVersion();\n\t\tconsole.log(\"xcode: \", xcodeVersion);\n\n\t\tconst isAndroidInstalled = await sysInfo.isAndroidInstalled();\n\t\tconsole.log(\"is Android installed: \", isAndroidInstalled);\n\n\t\tconst isITunesInstalled = await sysInfo.isITunesInstalled();\n\t\tconsole.log(\"is iTunes installed: \", isITunesInstalled);\n\n\t\tconst isCocoaPodsWorkingCorrectly = await sysInfo.isCocoaPodsWorkingCorrectly();\n\t\tconsole.log(\"is cocoapods working correctly: \", isCocoaPodsWorkingCorrectly);\n\n\t\tconst nativeScriptCliVersion = await sysInfo.getNativeScriptCliVersion();\n\t\tconsole.log(\"{N} CLI version: \", nativeScriptCliVersion);\n\n\t\tconst xcprojInfo = await sysInfo.getXcprojInfo();\n\t\tconsole.log(\"xcproj info: \", xcprojInfo);\n\n\t\tconst isCocoaPodsUpdateRequired = await sysInfo.isCocoaPodsUpdateRequired();\n\t\tconsole.log(\"is CocoaPods update required: \", isCocoaPodsUpdateRequired);\n\n\t\tconst pythonInfo = await sysInfo.getPythonInfo();\n\t\tconsole.log(\"python info: \", pythonInfo );\n\n\t\tconst sysInfoData = await sysInfo.getSysInfo();\n\t\tconsole.log(\"sysInfo: \", sysInfoData);\n\n\t\tconst gitPath = await sysInfo.getGitPath();\n\t\tconsole.log(\"Path to the git executable: \", gitPath);\n\t}\n\n\tmain();\n\n\t```\n\n\t- Interfaces:\n\t```TypeScript\n\t/**\n\t * Describes methods which helps collecting system information.\n\t */\n\tinterface ISysInfo {\n\t\t/**\n\t\t * Returns the currently installed Java compiler version.\n\t\t * @return {Promise<string>} The currently installed Java compiler version.\n\t\t */\n\t\tgetJavaCompilerVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the currently installed version of Xcode.\n\t\t * @return {Promise<string>} Returns the currently installed version of Xcode or null if Xcode is not installed or executed on Linux or Windows.\n\t\t */\n\t\tgetXcodeVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the currently installed Node.js version.\n\t\t * @return {Promise<string>} Returns the currently installed Node.js version.\n\t\t */\n\t\tgetNodeVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the currently installed npm version.\n\t\t * @return {Promise<string>} Returns the currently installed npm version.\n\t\t */\n\t\tgetNpmVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the currently installed node-gyp version.\n\t\t * @return {Promise<string>} Returns the currently installed node-gyp version. If node-gyp is not installed it will return null.\n\t\t */\n\t\tgetNodeGypVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the xcodeproj location.\n\t\t * @return {Promise<string>} Returns the xcodeproj location. If the the xcodeproj is not installed it will return null.\n\t\t */\n\t\tgetXcodeprojLocation(): Promise<string>;\n\n\t\t/**\n\t\t * Checks if iTunes is installed.\n\t\t * @return {Promise<string>} Returns true if iTunes is installed.\n\t\t */\n\t\tisITunesInstalled(): Promise<boolean>;\n\n\t\t/**\n\t\t * Returns the currently installed Cocoapods version.\n\t\t * @return {Promise<string>} Returns the currently installed Cocoapods version. It will return null if Cocoapods is not installed.\n\t\t */\n\t\tgetCocoaPodsVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the os name.\n\t\t * @return {Promise<string>} Returns the os name.\n\t\t */\n\t\tgetOs(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the currently installed ADB version.\n\t\t * @param {string} pathToAdb Defines path to adb\n\t\t * @return {Promise<string>} Returns the currently installed ADB version. It will return null if ADB is not installed.\n\t\t */\n\t\tgetAdbVersion(pathToAdb?: string): Promise<string>;\n\n\t\t/**\n\t\t * Checks if Android is installed.\n\t\t * @return {Promise<boolean>} Returns true if Android is installed.\n\t\t */\n\t\tisAndroidInstalled(): Promise<boolean>;\n\n\t\t/**\n\t\t * Returns the currently installed Mono version.\n\t\t * @return {Promise<string>} Returns the currently installed Mono version. It will return null if Mono is not installed.\n\t\t */\n\t\tgetMonoVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the currently installed Git version.\n\t\t * @return {Promise<string>} Returns the currently installed Git version. It will return null if Git is not installed.\n\t\t */\n\t\tgetGitVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Returns the currently installed Gradle version.\n\t\t * @return {Promise<string>} Returns the currently installed Gradle version. It will return null if Gradle is not installed.\n\t\t */\n\t\tgetGradleVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Checks if CocoaPods is working correctly by trying to install one pod.\n\t\t * @return {Promise<boolean>} Returns true if CocoaPods is working correctly.\n\t\t */\n\t\tisCocoaPodsWorkingCorrectly(): Promise<boolean>;\n\n\t\t/**\n\t\t * Returns the version of the globally installed NativeScript CLI.\n\t\t * @return {Promise<string>} Returns the version of the globally installed NativeScript CLI.\n\t\t */\n\t\tgetNativeScriptCliVersion(): Promise<string>;\n\n\t\t/**\n\t\t * Checks if xcproj is required to build projects and if it is installed.\n\t\t * @return {Promise<IXcprojInfo>} Returns the collected information aboud xcproj.\n\t\t */\n\t\tgetXcprojInfo(): Promise<IXcprojInfo>;\n\n\t\t/**\n\t\t * Checks if the current version of CocoaPods is compatible with the installed Xcode.\n\t\t * @return {boolean} true if an update us require.\n\t\t */\n\t\tisCocoaPodsUpdateRequired(): Promise<boolean>;\n\n\t\t/**\n\t\t * Checks if the Android SDK Tools are installed and configured correctly.\n\t\t * @return {Promise<boolean>} true if the Android SDK Tools are installed and configured correctly.\n\t\t */\n\t\tisAndroidSdkConfiguredCorrectly(): Promise<boolean>;\n\n\t\t/**\n\t\t * Returns the whole system information.\n\t\t * @param {ISysInfoConfig} config\n\t\t * @return {Promise<ISysInfoData>} The system information.\n\t\t */\n\t\tgetSysInfo(config?: ISysInfoConfig): Promise<ISysInfoData>;\n\n\t\t/**\n\t\t * If set to true each method will cache it's result. The default value is true.\n\t\t * @param {boolean} shouldCache The cache switch.\n\t\t * @return {void}\n\t\t */\n\t\tsetShouldCacheSysInfo(shouldCache: boolean): void;\n\n\t\t/**\n\t\t * Returns the path to the currently installed Git.\n\t\t * @return {Promise<string>} Returns the path to the currently installed Git. It will return null if Git is not installed.\n\t\t */\n\t\tgetGitPath(): Promise<string>;\n\t}\n\n\tinterface ISysInfoData {\n\t\t// os stuff\n\t\t/**\n\t\t * Os platform flavour, reported by os.platform.\n\t\t * @type {string}\n\t\t */\n\t\tplatform: string;\n\n\t\t/**\n\t\t * Full os name, like `uname -a` on unix, registry query on win.\n\t\t * @type {string}\n\t\t */\n\t\tos: string;\n\n\t\t/**\n\t\t * .net version, applicable to windows only.\n\t\t * @type {string}\n\t\t */\n\t\tdotNetVer: string;\n\n\t\t/**\n\t\t * The command shell in use, usually bash or cmd.\n\t\t * @type {string}\n\t\t */\n\t\tshell: string;\n\n\t\t// node stuff\n\t\t/**\n\t\t * node.js version, returned by node -v.\n\t\t * @type {string}\n\t\t */\n\t\tnodeVer: string;\n\n\t\t/**\n\t\t * npm version, returned by `npm -v`.\n\t\t * @type {string}\n\t\t */\n\t\tnpmVer: string;\n\n\t\t/**\n\t\t * Process architecture, returned by `process.arch`.\n\t\t * @type {string}\n\t\t */\n\t\tprocArch: string;\n\n\t\t/**\n\t\t * node-gyp version as returned by `node-gyp -v`.\n\t\t * @type {string}\n\t\t */\n\t\tnodeGypVer: string;\n\n\t\t// dependencies\n\t\t/**\n\t\t * Xcode version string as returned by `xcodebuild -version`. Valid only on Mac.\n\t\t * @type {string}\n\t\t */\n\t\txcodeVer: string;\n\n\t\t/**\n\t\t * Version string of adb, as returned by `adb version`.\n\t\t * @type {string}\n\t\t */\n\t\tadbVer: string;\n\n\t\t/**\n\t\t * Whether iTunes is installed on the machine.\n\t\t * @type {boolean}\n\t\t */\n\t\titunesInstalled: boolean;\n\n\t\t/**\n\t\t * Whether `android` executable can be run.\n\t\t * @type {boolean}\n\t\t */\n\t\tandroidInstalled: boolean;\n\n\t\t/**\n\t\t * mono version, relevant on Mac only.\n\t\t * @type {string}\n\t\t */\n\t\tmonoVer: string;\n\n\t\t/**\n\t\t * git version string, as returned by `git --version`.\n\t\t * @type {string}\n\t\t */\n\t\tgitVer: string;\n\n\t\t/**\n\t\t * gradle version string as returned by `gradle -v`.\n\t\t * @type {string}\n\t\t */\n\t\tgradleVer: string;\n\n\t\t/**\n\t\t * javac version string as returned by `javac -version`.\n\t\t * @type {string}\n\t\t */\n\t\tjavacVersion: string;\n\n\t\t/**\n\t\t * pod version string, as returned by `pod --version`.\n\t\t * @type {string}\n\t\t */\n\t\tcocoaPodsVer: string;\n\n\t\t/**\n\t\t * xcodeproj gem location, as returned by `which gem xcodeproj`.\n\t\t * @type {string}\n\t\t */\n\t\txcodeprojLocation: string;\n\n\t\t/**\n\t\t * true id CocoaPods can successfully execute pod install.\n\t\t * @type {boolean}\n\t\t */\n\t\tisCocoaPodsWorkingCorrectly: boolean;\n\n\t\t/**\n\t\t * NativeScript CLI version string, as returned by `tns --version`.\n\t\t * @type {string}\n\t\t */\n\t\tnativeScriptCliVersion: string;\n\n\t\t/**\n\t\t * Information about xcproj.\n\t\t * @type {string}\n\t\t */\n\t\txcprojInfo: IXcprojInfo;\n\n\t\t/**\n\t\t * true if the system requires xcproj to build projects successfully and the CocoaPods version is not compatible with the Xcode.\n\t\t */\n\t\tisCocoaPodsUpdateRequired: boolean;\n\n\t\t/**\n\t\t * true if the Android SDK Tools are installed and configured correctly.\n\t\t * @type {boolean}\n\t\t */\n\t\tisAndroidSdkConfiguredCorrectly: boolean;\n\t}\n\n\t/**\n\t * Describes information about xcproj brew formula.\n\t */\n\tinterface IXcprojInfo {\n\t\t/**\n\t\t * Determines whether the system needs xcproj to execute ios builds sucessfully.\n\t\t */\n\t\tshouldUseXcproj: boolean;\n\n\t\t/**\n\t\t * Determines whether xcproj can be called from the command line.\n\t\t */\n\t\txcprojAvailable: boolean;\n\t}\n\t```\n\n* Module `androidToolsInfo`:\n\t- Usage:\n\t```TypeScript\n\timport { androidToolsInfo } from \"nativescript-doctor\"\n\n\tfunction main() {\n\t\tconsole.log(\"path to adb from android home: \", await androidToolsInfo.getPathToAdbFromAndroidHome());\n\t\tconsole.log(\"path to emulator executable: \", androidToolsInfo.getPathToEmulatorExecutable());\n\t\tconsole.log(\"android tools info: \", androidToolsInfo.getToolsInfo());\n\t\tconsole.log(\"ANROID_HOME validation errors: \", await androidToolsInfo.validateAndroidHomeEnvVariable());\n\t\tconsole.log(\"android tools info validation errors: \", await androidToolsInfo.validateInfo());\n\t\tconsole.log(\"javac validation errors: \", await androidToolsInfo.validateJavacVersion(await sysInfo.getJavaCompilerVersion()));\n\t}\n\n\tmain();\n\t```\n\t- Interfaces:\n\t```TypeScript\n\t/**\n\t * Describes methods for getting and validating Android tools.\n\t */\n\tinterface IAndroidToolsInfo {\n\t\t/**\n\t\t * Returns the Android tools info.\n\t\t * @return {NativeScriptDoctor.IAndroidToolsInfoData} returns the Android tools info.\n\t\t */\n\t\tgetToolsInfo(): NativeScriptDoctor.IAndroidToolsInfoData;\n\n\t\t/**\n\t\t * Checks if the Android tools are valid.\n\t\t * @return {NativeScriptDoctor.IWarning[]} An array of errors from the validation checks. If there are no errors will return [].\n\t\t */\n\t\tvalidateInfo(): NativeScriptDoctor.IWarning[];\n\n\t\t/**\n\t\t * Checks if the current javac version is valid.\n\t\t * @param {string} installedJavaVersion The version of javac to check.\n\t\t * @return {NativeScriptDoctor.IWarning[]} An array of errors from the validation checks. If there are no errors will return [].\n\t\t */\n\t\tvalidateJavacVersion(installedJavaVersion: string): NativeScriptDoctor.IWarning[];\n\n\t\t/**\n\t\t * Returns the path to the adb which is located in ANDROID_HOME.\n\t\t * @return {Promise<string>} Path to the adb which is located in ANDROID_HOME.\n\t\t */\n\t\tgetPathToAdbFromAndroidHome(): Promise<string>;\n\n\t\t/**\n\t\t * Checks if the ANDROID_HOME variable is set to the correct folder.\n\t\t * @return {NativeScriptDoctor.IWarning[]} An array of errors from the validation checks. If there are no errors will return [].\n\t\t */\n\t\tvalidateAndroidHomeEnvVariable(): NativeScriptDoctor.IWarning[];\n\n\t\t/**\n\t\t * Returns the path to the emulator executable.\n\t\t * @return {string} The path to the emulator executable.\n\t\t */\n\t\tgetPathToEmulatorExecutable(): string;\n\t}\n\n\t/**\n\t * Describes information about installed Android tools and SDKs.\n\t */\n\tinterface IAndroidToolsInfoData {\n\t\t/**\n\t\t * The value of ANDROID_HOME environment variable.\n\t\t */\n\t\tandroidHomeEnvVar: string;\n\n\t\t/**\n\t\t * The latest installed version of Android Build Tools that satisfies CLI's requirements.\n\t\t */\n\t\tbuildToolsVersion: string;\n\n\t\t/**\n\t\t * The latest installed version of Android SDK that satisfies CLI's requirements.\n\t\t */\n\t\tcompileSdkVersion: number;\n\n\t\t/**\n\t\t * The latest installed version of Android Support Repository that satisfies CLI's requirements.\n\t\t */\n\t\tsupportRepositoryVersion: string;\n\t}\n\t```\n\n* Module `constants`:\n\t- Usage:\n\t```TypeScript\n\timport { constants } from \"nativescript-doctor\"\n\n\tfunction main() {\n\t\tfor(let constantName in constants) {\n\t\t\tconsole.log(`${constantName}: ${constants[constantName]}`);\n\t\t}\n\t}\n\n\tmain();\n\t```\n\n\t- Interfaces:\n\t```TypeScript\n\t/**\n\t * Describes the constants used in the module.\n\t */\n\tinterface IConstants {\n\t\tANDROID_PLATFORM_NAME: string;\n\t\tIOS_PLATFORM_NAME: string;\n\t\tSUPPORTED_PLATFORMS: string[];\n\t}\n\t```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/NativeScript/nativescript-doctor.git"
  },
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha"
  },
  "types": "./typings/nativescript-doctor.d.ts",
  "version": "0.12.0"
}
