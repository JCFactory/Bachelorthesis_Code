{
  "_args": [
    [
      {
        "raw": "ora@https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
        "scope": null,
        "escapedName": "ora",
        "name": "ora",
        "rawSpec": "https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
        "spec": "https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
        "type": "remote"
      },
      "/Users/jacquelinefranssen/Desktop/Bachelorthesis_Code/RFID_App/node_modules/nativescript"
    ]
  ],
  "_from": "ora@https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
  "_id": "ora@2.0.0",
  "_inCache": true,
  "_location": "/nativescript/ora",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5",
    "has-flag": "3.0.0"
  },
  "_requested": {
    "raw": "ora@https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
    "scope": null,
    "escapedName": "ora",
    "name": "ora",
    "rawSpec": "https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
    "spec": "https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/nativescript"
  ],
  "_resolved": "https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
  "_shasum": "8ec3a37fa7bffb54a3a0c188a1f6798e7e1827cd",
  "_shrinkwrap": null,
  "_spec": "ora@https://registry.npmjs.org/ora/-/ora-2.0.0.tgz",
  "_where": "/Users/jacquelinefranssen/Desktop/Bachelorthesis_Code/RFID_App/node_modules/nativescript",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/ora/issues"
  },
  "dependencies": {
    "chalk": "^2.3.1",
    "cli-cursor": "^2.1.0",
    "cli-spinners": "^1.1.0",
    "log-symbols": "^2.2.0",
    "strip-ansi": "^4.0.0",
    "wcwidth": "^1.0.1"
  },
  "description": "Elegant terminal spinner",
  "devDependencies": {
    "ava": "*",
    "get-stream": "^3.0.0",
    "xo": "*"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sindresorhus/ora#readme",
  "keywords": [
    "cli",
    "spinner",
    "spinners",
    "terminal",
    "term",
    "console",
    "ascii",
    "unicode",
    "loading",
    "indicator",
    "progress",
    "busy",
    "wait",
    "idle"
  ],
  "license": "MIT",
  "name": "ora",
  "optionalDependencies": {},
  "readme": "# ora [![Build Status](https://travis-ci.org/sindresorhus/ora.svg?branch=master)](https://travis-ci.org/sindresorhus/ora)\n\n> Elegant terminal spinner\n\n<p align=\"center\">\n\t<img src=\"https://rawgit.com/sindresorhus/ora/master/screenshot.svg\" width=\"500\">\n</p>\n\n\n## Install\n\n```\n$ npm install ora\n```\n\n<a href=\"https://www.patreon.com/sindresorhus\">\n\t<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" width=\"160\">\n</a>\n\n\n## Usage\n\n```js\nconst ora = require('ora');\n\nconst spinner = ora('Loading unicorns').start();\n\nsetTimeout(() => {\n\tspinner.color = 'yellow';\n\tspinner.text = 'Loading rainbows';\n}, 1000);\n```\n\n\n## API\n\nIt will gracefully not do anything when there's no TTY or when running in a CI.\n\n### ora([options|text])\n\nIf a string is provided, it is treated as a shortcut for [`options.text`](#text).\n\n#### options\n\nType: `Object`\n\n##### text\n\nType: `string`\n\nText to display after the spinner.\n\n##### spinner\n\nType: `string` `Object`<br>\nDefault: `dots` <img src=\"screenshot-spinner.gif\" width=\"14\">\n\nName of one of the [provided spinners](https://github.com/sindresorhus/cli-spinners/blob/master/spinners.json). See `example.js` in this repo if you want to test out different spinners.\n\nOr an object like:\n\n```js\n{\n\tinterval: 80, // optional\n\tframes: ['-', '+', '-']\n}\n```\n\n##### color\n\nType: `string`<br>\nDefault: `cyan`<br>\nValues: `black` `red` `green` `yellow` `blue` `magenta` `cyan` `white` `gray`\n\nColor of the spinner.\n\n##### hideCursor\n\nType: `boolean`<br>\nDefault: `true`\n\nSet to `false` to stop Ora from hiding the cursor.\n\n##### interval\n\nType: `number`<br>\nDefault: Provided by the spinner or `100`\n\nInterval between each frame.\n\nSpinners provide their own recommended interval, so you don't really need to specify this.\n\n##### stream\n\nType: `WritableStream`<br>\nDefault: `process.stderr`\n\nStream to write the output.\n\nYou could for example set this to `process.stdout` instead.\n\n##### enabled\n\nType: `boolean`\n\nForce enable/disable the spinner. If not specified, the spinner will be enabled if the `stream` is being run inside a TTY context (not spawned or piped) and/or not in a CI environment.\n\n### Instance\n\n#### .start([text])\n\nStart the spinner. Returns the instance. Set the current text if `text` is provided.\n\n#### .stop()\n\nStop and clear the spinner. Returns the instance.\n\n#### .succeed([text])\n\nStop the spinner, change it to a green `✔` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .fail([text])\n\nStop the spinner, change it to a red `✖` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .warn([text])\n\nStop the spinner, change it to a yellow `⚠` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .info([text])\n\nStop the spinner, change it to a blue `ℹ` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .stopAndPersist([options])\n\nStop the spinner and change the symbol or text. Returns the instance. See the GIF below.\n\n##### options\n\nType: `Object`\n\n###### symbol\n\nType: `string`<br>\nDefault: `' '`\n\nSymbol to replace the spinner with.\n\n###### text\n\nType: `string`<br>\nDefault: Current text\n\nText to be persisted.\n\n<img src=\"screenshot-2.gif\" width=\"480\">\n\n#### .clear()\n\nClear the spinner. Returns the instance.\n\n#### .render()\n\nManually render a new frame. Returns the instance.\n\n#### .frame()\n\nGet a new frame.\n\n#### .text\n\nChange the text.\n\n#### .color\n\nChange the spinner color.\n\n### ora.promise(action, [options|text])\n\nStarts a spinner for a promise. The spinner is stopped with `.succeed()` if the promise fulfills or with `.fail()` if it rejects. Returns the spinner instance.\n\n#### action\n\nType: `Promise`\n\n\n## Related\n\n- [cli-spinners](https://github.com/sindresorhus/cli-spinners) - Spinners for use in the terminal\n- [listr](https://github.com/SamVerschueren/listr) - Terminal task list\n- [CLISpinner](https://github.com/kiliankoe/CLISpinner) - Terminal spinner library for Swift\n- [halo](https://github.com/ManrajGrover/halo) - Python port\n- [spinners](https://github.com/FGRibreau/spinners) - Terminal spinners for Rust\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/ora.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "2.0.0"
}
