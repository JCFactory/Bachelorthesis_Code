"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const nativescript_doctor_1 = require("nativescript-doctor");
class SysInfo {
    constructor() {
        this.sysInfo = null;
    }
    getSysInfo(config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.sysInfo) {
                const pathToNativeScriptCliPackageJson = (config && config.pathToNativeScriptCliPackageJson) || path.join(__dirname, "..", "package.json");
                const androidToolsInfo = config && config.androidToolsInfo;
                this.sysInfo = yield nativescript_doctor_1.sysInfo.getSysInfo({ pathToNativeScriptCliPackageJson, androidToolsInfo });
            }
            return this.sysInfo;
        });
    }
    getXcodeVersion() {
        return nativescript_doctor_1.sysInfo.getXcodeVersion();
    }
    getCocoaPodsVersion() {
        return nativescript_doctor_1.sysInfo.getCocoaPodsVersion();
    }
    getJavaCompilerVersion() {
        return nativescript_doctor_1.sysInfo.getJavaCompilerVersion();
    }
}
exports.SysInfo = SysInfo;
$injector.register("sysInfo", SysInfo);
